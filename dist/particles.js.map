{"version":3,"sources":["particles.js","src/particles.js"],"names":[],"mappings":"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","file":"particles.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Particles = factory()\n}(this, function () { 'use strict';\n\n  class Particles {\n\n    constructor(element) {\n\n      this.element = element;\n      this.canvas = document.createElement('canvas');\n      this.canvas.width = element.offsetWidth;\n      this.canvas.height = element.offsetHeight * 2;\n      this.ctx = this.canvas.getContext('2d');\n\n      const particles = this.getParticles(element);\n      this.fillCanvasSquare(particles);\n    }\n\n    getParticles() {\n      const resolution = 5;\n\n      function Particle(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n\n      // fill with text\n      this.ctx.font = getComputedStyle(this.element).getPropertyValue('font');\n      this.ctx.fillStyle = 'white';\n      this.ctx.fillText(this.element.innerHTML, 10, this.element.offsetHeight);\n\n      // now parse bitmap based on grid\n      const data = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height).data;\n\n      // use a 32-bit buffer as we are only checking if a pixel is set or not\n      const buffer32 = new Uint32Array(data.buffer);\n\n      // using two loops here, single loop with index-to-x/y is also an option\n      const particles = [];\n      for (let y = 0; y < this.canvas.height; y += resolution) {\n        for (let x = 0; x < this.canvas.width; x += resolution) {\n\n          //buffer32[] will have a value > 0 (true) if set, if not 0=false\n          if (buffer32[y * this.canvas.width + x]) {\n            particles.push(new Particle(x, y));\n          }\n        }\n      }\n\n      return particles;\n    }\n\n    fillCanvasSquare(particles) {\n\n      // render particles\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      particles.forEach(p =>\n        this.ctx.fillRect(p.x - 2, p.y - 2, 3, 3) // just squares here\n      );\n\n      this.element.appendChild(this.canvas);\n    }\n\n    fillCanvasCircle(particles) {\n\n      // render particles\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      particles.forEach(p => {\n        this.ctx.beginPath();\n        this.ctx.arc(p.x, p.y, 2, 0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.fill();\n      });\n\n      this.element.appendChild(this.canvas);\n    }\n\n    drawGrid() {\n      let width = this.canvas.width;\n      let height = this.canvas.height;\n\n      ctx.fillStyle = 'red';\n      for (let y = 0; y < height; y += resolution) {\n        ctx.fillRect(0, y - 0.5, width, 1);\n        for (let x = 0; x < width; x += resolution) {\n          ctx.fillRect(x - 0.5, 0, 1, height);\n        }\n      }\n    }\n\n  };\n\n  var _particles = Particles;\n\n  return _particles;\n\n}));\n","class Particles {\n\n  constructor(element) {\n\n    this.element = element;\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = element.offsetWidth;\n    this.canvas.height = element.offsetHeight * 2;\n    this.ctx = this.canvas.getContext('2d');\n\n    const particles = this.getParticles(element);\n    this.fillCanvasSquare(particles);\n  }\n\n  getParticles() {\n    const resolution = 5;\n\n    function Particle(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    // fill with text\n    this.ctx.font = getComputedStyle(this.element).getPropertyValue('font');\n    this.ctx.fillStyle = 'white';\n    this.ctx.fillText(this.element.innerHTML, 10, this.element.offsetHeight);\n\n    // now parse bitmap based on grid\n    const data = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height).data;\n\n    // use a 32-bit buffer as we are only checking if a pixel is set or not\n    const buffer32 = new Uint32Array(data.buffer);\n\n    // using two loops here, single loop with index-to-x/y is also an option\n    const particles = [];\n    for (let y = 0; y < this.canvas.height; y += resolution) {\n      for (let x = 0; x < this.canvas.width; x += resolution) {\n\n        //buffer32[] will have a value > 0 (true) if set, if not 0=false\n        if (buffer32[y * this.canvas.width + x]) {\n          particles.push(new Particle(x, y));\n        }\n      }\n    }\n\n    return particles;\n  }\n\n  fillCanvasSquare(particles) {\n\n    // render particles\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    particles.forEach(p =>\n      this.ctx.fillRect(p.x - 2, p.y - 2, 3, 3) // just squares here\n    );\n\n    this.element.appendChild(this.canvas);\n  }\n\n  fillCanvasCircle(particles) {\n\n    // render particles\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    particles.forEach(p => {\n      this.ctx.beginPath();\n      this.ctx.arc(p.x, p.y, 2, 0, Math.PI * 2);\n      this.ctx.closePath();\n      this.ctx.fill();\n    });\n\n    this.element.appendChild(this.canvas);\n  }\n\n  drawGrid() {\n    let width = this.canvas.width;\n    let height = this.canvas.height;\n\n    ctx.fillStyle = 'red';\n    for (let y = 0; y < height; y += resolution) {\n      ctx.fillRect(0, y - 0.5, width, 1);\n      for (let x = 0; x < width; x += resolution) {\n        ctx.fillRect(x - 0.5, 0, 1, height);\n      }\n    }\n  }\n\n};\n\nexport default Particles;\n"],"sourceRoot":"/source/"}